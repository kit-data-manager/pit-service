### General Spring Boot Settings ###
# When to include "message" attribute in HTTP responses on uncatched exceptions.
server.error.include-message: always
springdoc.show-actuator=true
# Do __not__ change these settings below:
spring.main.allow-bean-definition-overriding=true
spring.data.rest.detection-strategy:annotated
#####################################################

###########################
### Port, SSL, Security ###
###########################

server.port: 8090
#server.ssl.key-store: keystore.p12
#server.ssl.key-store-password: test123
#server.ssl.keyStoreType: PKCS12
#server.ssl.keyAlias: tomcat

# Data transfer settings, e.g. transfer compression and multipart message size. 
# The properties max-file-size and max-request-size define the maximum size of files 
# transferred to and from the repository. Setting them to -1 removes all limits.
server.compression.enabled: false
spring.servlet.multipart.max-file-size: 100MB
spring.servlet.multipart.max-request-size: 100MB
   
# *Generic* Spring Management Endpoint Settings. By default, the health endpoint will be 
# enabled to apply service monitoring including detailed information. 
# Furthermore, all endpoints will be exposed to external access. If this is not desired, 
# just comment the property 'management.endpoints.web.exposure.include' in order to only 
# allow local access.
management.endpoint.health.enabled: true
management.endpoint.health.show-details: ALWAYS
management.endpoint.health.sensitive: false
management.endpoints.web.exposure.include: *

###############
### Logging ###
###############

# Logging Settings. Most logging of KIT DM is performed on TRACE level. However, if you
# plan to enable logging with this granularity it is recommended to this only for 
# a selection of a few packages. Otherwise, the amount of logging information might be
# overwhelming.
#logging.level.root: ERROR
#logging.level.edu.kit.datamanager.doip:TRACE
logging.level.edu.kit: WARN
#logging.level.org.springframework.transaction: TRACE
logging.level.org.springframework: WARN 
logging.level.org.springframework.amqp: WARN
#logging.level.com.zaxxer.hikari: ERROR
logging.level.edu.kit.datamanager.pit.cli: INFO

######################
### Authentication ###
######################

# Enable/disable (default) authentication. If authentication is enabled, a separate 
# Authentication Service should be used in order to obtain JSON Web Tokens holding 
# login information. The token has then to be provided within the Authentication header
# of each HTTP request with a value of 'Bearer <TOKEN>' without quotes, replacing <TOKEN>
# be the token obtained from the authentication service.
# A token needs a "username" in its payload. A minimal token therefore may look like this:
# https://jwt.io/#debugger-io?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InVzZXIifQ.pfZuRuxbj_izZlCnmotWHQuH00BJ35CbjpHILpuQU70
repo.auth.enabled: false

# The jwtSecret is the mutual secret between all trusted services. This means, that if
# authentication is enabled, the jwtSecret used by the Authentication Service to sign
# issued JWTokens must be the same as the jwtSecret of the repository in order to 
# be able to validate the signature. By default, the secret should be selected randomly
# and with a sufficient length.
repo.auth.jwtSecret: vkfvoswsohwrxgjaxipuiyyjgubggzdaqrcuupbugxtnalhiegkppdgjgwxsmvdb

###############################
### Keycloak Authentication ###
###############################

spring.autoconfigure.exclude=org.keycloak.adapters.springboot.KeycloakAutoConfiguration,org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
#keycloakjwt.jwk-url=http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/certs
#keycloakjwt.resource=keycloak-angular
#keycloakjwt.jwt-claim=preferred_username  # additional required payload by this application
##keycloakjwt.connect-timeoutms=500  # optional
##keycloakjwt.read-timeoutms=500  # optional
#
#keycloak.realm = myrealm
#keycloak.auth-server-url = http://localhost:8080/auth
#keycloak.resource = keycloak-angular

############################################
### Elastic Indexing and search endpoint ###
######## (requires Elasticsearch 8) ########
############################################

# enables search endpoint at /api/v1/search
repo.search.enabled: false
repo.search.index: *
management.health.elasticsearch.enabled: false

# TO BE REMOVED!
repo.search.url: http://localhost:9200
# Soon will be:
#spring.elasticsearch.uris=http://localhost:9200
#spring.elasticsearch.username=user
#spring.elasticsearch.password=secret
#spring.elasticsearch.socket-timeout=10s

#################
### Messaging ###
#################

# Enable (default)/disable messaging. The messaging functionality requires a RabbitMQ
# server receiving and distributing the messages sent by this service. The server is 
# accessed via repo.messaging.hostname and repo.messaging.port 
# The property 'repo.messaging.topic' defines the topic where messages are sent, whereas 
# the all properties with 'binding' define from where messages are received, e.g. the 
# exchange aka. topic and the queue. The routingKeys are defining wich messages are 
# routed to the aforementioned queue.
repo.messaging.enabled: false
repo.messaging.hostname: localhost
repo.messaging.port: 5672
repo.messaging.sender.exchange: record_events

# The rate in milliseconds at which the repository itself will check for new messages.
# E.g. if a resource has been created, the repository may has to perform additional
# ingest steps. Therefor, special handlers can be added which will be executed at the
# configured repo.schedule.rate if a new message has been received.
repo.schedule.rate:1000

#######################################################
##################### PIT Service #####################
#######################################################
# Standard resolver for Handle PIDs. Should usually stay like this.
pit.pidsystem.handle.baseURI = http://hdl.handle.net/

### Choosing and configuring the PID system ###
# Available implementations:
# - IN_MEMORY (default, sandboxed, non-permanent PIDs, for short testing / demonstration only),
# - LOCAL (sandboxed, uses local database, no public PIDs!, for long term testing or special use-cases),
# - HANDLE_PROTOCOL (recommended, for real FAIR Digital Objects),
pit.pidsystem.implementation = LOCAL
# If you chose IN_MEMORY, no further configuration is required.
# If you chose LOCAL, no further configuration is required.
# If you chose HANDLE_PROTOCOL, you need to set up your prefix and its key/certificate:
#pit.pidsystem.handle-protocol.credentials.handleIdentifierPrefix = 21.T11981  # prefix string
#pit.pidsystem.handle-protocol.credentials.userHandle = 21.T11981/USER01  # user PID
#pit.pidsystem.handle-protocol.credentials.privateKeyPath = test_prefix_data/21.T11981_USER01_300_privkey.bin  # private key/certificate file

### Base URL for the DTR used. ###
# Currently, we support the DTRs of GWDG/ePIC. Currently known instances:
# - http://dtr-test.pidconsortium.eu/, https://dtr-test.pidconsortium.net/
# - http://dtr-pit.pidconsortium.eu/, http://dtr-pit.pidconsortium.net/
# - http://typeregistry.org/
pit.typeregistry.baseURI = http://dtr-test.pidconsortium.eu/

### As this service is a RESTful serice without GUI, CSRF protection is not required. ###
pit.security.enable-csrf: false
### You may define patterns here for services which are allowed for communication. (CORS) ###
pit.security.allowedOriginPattern: http*://localhost:[*]

#######################################################
#################### PID GENERATOR ####################
#######################################################

# The PID generator to use for the suffix. Possible values:
# "uuid4": generates a UUID v4 (random) PID suffix.
# "hex-chunks": generates hex-chunks. Each chunk is four characters long. Example: 1D6C-152C-C9E0-C136-1509
pit.pidgeneration.mode = uuid4

# A prefix for branding, in addition to the PID system prefix.
# Structure: <system-prefix><branding-prefix><suffix>
# Example: branding-prefix = "my-project.", system-prefix = "21.T11981", suffix = "12345"
#          => PID = "21.T11981/my-project.12345"
#
# pit.pidgeneration.branding-prefix = my-project.

# Applies a casing on the PIDs after generation (see "mode" property). Possible values:
# "lower": all characters are lower case
# "upper": all characters are upper case
# "unmodified": no casing is applied after generation. Result depends fully on the generator.
pit.pidgeneration.casing = lower

# Affects chunk-based generation modes (see pid.pidgeneration.mode) only.
# Defines the number of chunks the generator should generate for each PID.
# Default: 4
# pit.pidgeneration.num-chunks = 4

### DANGEROUS OPTION! Please read carefully! ########################################
# Please keep this option as a last resort vor special use-cases
# where you need total control about the PID suffix you want to create.
# In addition to authentication, we recommend fully hide the Typed PID Maker behind
# a gateway which will manage your custom PIDs.
# NOTE! If you do not already include the configured prefix in the PID, it will be appended.
#       This means that you can not create PIDs with a suffix starting with the system prefix.
#       Example: system prefix = "abc", suffix = abcdef
#                => PID = "abc/def" (delimiter may depend on PID system)
#
# pit.pidgeneration.custom-client-pids-enabled = false
### DANGEROUS OPTION! Please read carefully! ########################################

################################
######## Database ##############
################################
### - Stores known PIDs      ###
### - Stores PID records if  ###
###   system is set to LOCAL ###
### - Required for messaging ###
################################

# This database will always run, as it is also required for the messaging feature,
# but for the messaging it is not required to be persistent.
# But the service will also use this database to store known PIDs.
# This can be used as a backup or documentation of all PIDs.
# The following properties can (and should) be set.

# When to store PIDs in the local database ("known PIDs")
pit.storage.strategy: keep-resolved-and-modified
#pit.storage.strategy: keep-resolved
# The driver detemins the database system to start. Other drivers are untested, but may work.
spring.datasource.driver-class-name: org.h2.Driver
# Next, please choose a location for the database file on your file system.
# WARNING: If no url is being defined, an in-memory database is being used,
#          loosing all data on restart.
# WARNING: Change the DB to be stored somewhere outside of /tmp!
spring.datasource.url:  jdbc:h2:file:/tmp/database;MODE=LEGACY;NON_KEYWORDS=VALUE
# Credentials for the database:
spring.datasource.username: typid
spring.datasource.password: secure_me
# Do not change ddl-auto if you do not know what you are doing:
# https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/howto-database-initialization.html
spring.jpa.hibernate.ddl-auto: update
