# General Spring Boot Settings (do not change!)

spring.main.allow-bean-definition-overriding=true
spring.data.rest.detection-strategy:annotated

# Server Settings for defining port and security

server.port: 8090
#server.ssl.key-store: keystore.p12
#server.ssl.key-store-password: test123
#server.ssl.keyStoreType: PKCS12
#server.ssl.keyAlias: tomcat

# Data transfer settings, e.g. transfer compression and multipart message size. 
# The properties max-file-size and max-request-size define the maximum size of files 
# transferred to and from the repository. Setting them to -1 removes all limits.

server.compression.enabled: false
spring.servlet.multipart.max-file-size: 100MB
spring.servlet.multipart.max-request-size: 100MB
   
# Spring Management Endpoint Settings. By default, the health endpoint will be 
# enabled to apply service monitoring including detailed information. 
# Furthermore, all endpoints will be exposed to external access. If this is not desired, 
# just comment the property 'management.endpoints.web.exposure.include' in order to only 
# allow local access.

management.endpoint.health.enabled: true
management.endpoint.health.show-details: ALWAYS
management.endpoint.health.sensitive: false
management.endpoints.web.exposure.include: *

# Logging Settings. Most logging of KIT DM is performed on TRACE level. However, if you
# plan to enable logging with this granularity it is recommended to this only for 
# a selection of a few packages. Otherwise, the amount of logging information might be
# overwhelming.

#logging.level.root: ERROR
#logging.level.edu.kit.datamanager.doip:TRACE
logging.level.edu.kit: WARN
#logging.level.org.springframework.transaction: TRACE
logging.level.org.springframework: WARN 
logging.level.org.springframework.amqp: WARN
logging.level.com.zaxxer.hikari: DEBUG

###################################################################
##################  Repository Specific Settings ##################
###################################################################

# Enable/disable (default) authentication. If authentication is enabled, a separate 
# Authentication Service should be used in order to obtain JSON Web Tokens holding 
# login information. The token has then to be provided within the Authentication header
# of each HTTP request with a value of 'Bearer <TOKEN>' without quotes, replacing <TOKEN>
# be the token obtained from the authentication service.

repo.auth.enabled: false
# The jwtSecret is the mutual secret between all trusted services. This means, that if
# authentication is enabled, the jwtSecret used by the Authentication Service to sign
# issued JWTokens must be the same as the jwtSecret of the repository in order to 
# be able to validate the signature. By default, the secret should be selected randomly
# and with a sufficient length.

repo.auth.jwtSecret: vkfvoswsohwrxgjaxipuiyyjgubggzdaqrcuupbugxtnalhiegkppdgjgwxsmvdb
# The base path where all uploaded data will be stored. The base path must be a URI 
# pointing to a local folder.

repo.basepath:file:///Users/jejkal/tmp/

# Enable (default)/disable messaging. The messaging functionality requires a RabbitMQ
# server receiving and distributing the messages sent by this service. The server is 
# accessed via repo.messaging.hostname and repo.messaging.port 
# The property 'repo.messaging.topic' defines the topic where messages are sent, whereas 
# the all properties with 'binding' define from where messages are received, e.g. the 
# exchange aka. topic and the queue. The routingKeys are defining wich messages are 
# routed to the aforementioned queue.

repo.messaging.enabled: false
repo.messaging.hostname: localhost
repo.messaging.port: 5672
repo.messaging.sender.exchange: record_events
# The rate in milliseconds at which the repository itself will check for new messages.
# E.g. if a resource has been created, the repository may has to perform additional
# ingest steps. Therefor, special handlers can be added which will be executed at the
# configured repo.schedule.rate if a new message has been received.

repo.schedule.rate:1000
# Enable (default)/disable audit functionalities. Auditing captures on the one hand 
# information about events occured at managed resources, e.g. create, update, delete 
# events, on the other hand the audit functionalty enabled versioning of resources.

repo.audit.enabled:true

###################################
##### Plugin Related Settings #####
###################################

# The repository base URL used by a plugin to obtain resources via the RESTful API. 
# This property is generic for all plugins and mainly depends on the property 
# 'server.port' defined at the beginning of this document.
repo.plugin.repositoryBaseUrl:http://localhost:8090/api/v1/dataresources/

################
### Keycloak ###
################
spring.autoconfigure.exclude=org.keycloak.adapters.springboot.KeycloakAutoConfiguration,org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
#keycloakjwt.jwk-url=http://localhost:8080/auth/realms/myrealm/protocol/openid-connect/certs
#keycloakjwt.resource=keycloak-angular
#keycloakjwt.jwt-claim=preferred_username
##keycloakjwt.connect-timeoutms=500 //optional
##keycloakjwt.read-timeoutms=500 // optional
#
#keycloak.realm = myrealm
#keycloak.auth-server-url = http://localhost:8080/auth
#keycloak.resource = keycloak-angular

#######################################################
##################### PIT Service ### #################
#######################################################
# Standard resolver for Handle PIDs. Should usually stay like this.
pit.pidsystem.handle.baseURI = http://hdl.handle.net/

### Choosing and configuring the PID system ###
# Available implementations:
# - IN_MEMORY (default, sandboxed, non-permanent PIDs),
# - HANDLE_PROTOCOL (recommended),
# - HANDLE_REST (deprecated)
pit.pidsystem.implementation = IN_MEMORY
# If you chose IN_MEMORY, no further configuration is required.
# If you chose HANDLE_PROTOCOL, you need to set up your prefix and its key/certificate:
#pit.pidsystem.handle-protocol.credentials.handleIdentifierPrefix = 21.T11981  # prefix string
#pit.pidsystem.handle-protocol.credentials.userHandle = 21.T11981/USER01  # user PID
#pit.pidsystem.handle-protocol.credentials.privateKeyPath = test_prefix_data/21.T11981_USER01_300_privkey.bin  # private key/certificate file
# If you chose HANDLE_REST, you need to add credentials and the prefix:
#pit.pidsystem.handle.userName = 21.T11981/USER01
#pit.pidsystem.handle.userPassword = ...
#pit.pidsystem.handle.generatorPrefix = 21.T11981

### Base URL for the DTR used. ###
# Currently, we support the DTRs of GWDG/ePIC. Currently known instances:
# - http://dtr-test.pidconsortium.eu/, https://dtr-test.pidconsortium.net/
# - http://dtr-pit.pidconsortium.eu/, http://dtr-pit.pidconsortium.net/
# - http://typeregistry.org/
pit.typeregistry.baseURI = http://dtr-test.pidconsortium.eu/

### As this service is a RESTful serice without GUI, CSRF protection is not required. ###
pit.security.enable-csrf: false
### You may define patterns here for services which are allowed for communication. (CORS) ###
pit.security.allowedOriginPattern: http*://localhost:[*]

####################################
# Storing known PIDs in a database #
### (Also required for messaging) ##
####################################
# This database will always run, as it is also required for the messaging feature,
# but for the messaging it is not required to be persistent.
# But the service will also use this database to store known PIDs.
# This can be used as a backup or documentation of all PIDs.
# The following properties can (and should) be set.
# The driver detemins the database system to start. Other drivers are untested, but may work.
spring.datasource.driver-class-name: org.h2.Driver
# Next, please choose a location for the database file on your file system.
# WARNING: If no url is being defined, an in-memory database is being used,
#          loosing all data on restart.
# WARNING: Change the DB to be stored somewhere outside of /tmp!
spring.datasource.url:  jdbc:h2:file:/tmp/database;MODE=LEGACY;NON_KEYWORDS=VALUE
# Credentials for the database:
spring.datasource.username: typid
spring.datasource.password: secure_me
# Do not change ddl-auto if you do not know what you are doing:
# https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/howto-database-initialization.html
spring.jpa.hibernate.ddl-auto: update
